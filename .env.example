NAOMESH_ORCHESTRATOR_DEBUG=false

# The user login
NAOMESH_ORCHESTRATOR_GRID5000_USERNAME="grid_5000_username"

# The user password.
NAOMESH_ORCHESTRATOR_GRID5000_PASSWORD="grid_5000_password"

# Whether SSL certificates should be validated.
NAOMESH_ORCHESTRATOR_GRID5000_VERIFY_SSL=false

# Timeout to use for requests to the Grid5000 API.
NAOMESH_ORCHESTRATOR_GRID5000_TIMEOUT=

# path to the client certificate file for Grid5000 API
NAOMESH_ORCHESTRATOR_GRID5000_SSLCERT=

# path to the client key file for Grid5000 API
NAOMESH_ORCHESTRATOR_GRID5000_SSLKEY=

# SSL user name, default to anonymous
NAOMESH_ORCHESTRATOR_GRID5000_SSLUSER=

# Cluster site
NAOMESH_ORCHESTRATOR_GRID5000_SITE="nantes"

# Docker username
NAOMESH_ORCHESTRATOR_DOCKER_USERNAME="docker_username"

# Docker password
NAOMESH_ORCHESTRATOR_DOCKER_PASSWORD="docker_password"

# MVSMVSPIPELINE command to run inside the docker container
NAOMESH_ORCHESTRATOR_DOCKER_OPENMVS_IMAGE_MVGMVSPIPELINE_COMMAND_NAME=mvgmvs

# adress of the mqtt broker
MQTT_BROKER_ADDRESS="mqtt_broker_address"

# port of the mqtt broker
MQTT_BROKER_PORT="mqtt_broker_port"

# topic to listen to for client task requests
MQTT_BROKER_LAUNCH_TASK_TOPIC="launch_task"

# topic to upload to for task status update
MQTT_BROKER_STATUS_TASK_TOPIC="status_task"

#######################################
THIS SECTION IS USED BY THE NODE TO PULL PHOTOGRAMMETRY IMAGES AND PUSH RESULTS
#######################################
# see https://hub.docker.com/r/efrecon/s3fs
# AWS_S3_BUCKET should be the name of the bucket, this is mandatory.
# AWS_S3_AUTHFILE is the path to an authorisation file compatible with the format specified by s3fs. This can be empty, in which case data will be taken from the other authorisation-related environment variables.
# AWS_S3_ACCESS_KEY_ID is the access key to the S3 bucket, this is only used whenever AWS_S3_AUTHFILE is empty.
# AWS_S3_SECRET_ACCESS_KEY is the secret access key to the S3 bucket, this is only used whenever AWS_S3_AUTHFILE is empty. Note however that the variable AWS_S3_SECRET_ACCESS_KEY_FILE has precedence over this one.
# AWS_S3_SECRET_ACCESS_KEY_FILE points instead to a file that will contain the secret access key to the S3 bucket. When this is present, the password will be taken from the file instead of from the AWS_S3_SECRET_ACCESS_KEY variable. If that variable existed, it will be disregarded. This makes it easy to pass passwords using Docker secrets. This is only ever used whenever AWS_S3_AUTHFILE is empty.
# AWS_S3_URL is the URL to the Amazon service. This can be used to mount external services that implement a compatible API.
# AWS_S3_MOUNT is the location within the container where to mount the WebDAV resource. This defaults to /opt/s3fs/bucket and is not really meant to be changed.
# AWS_S3_ENVFILE is the location of a .env file, within the container, from where to read the content of environment variables. Only lines starting with AWS_S3_ or S3FS_ will be recognised. Content will be expanded by shell. Usually, you will want to bind mount that file from the host in read-only mode.
# UID is the user ID for the owner of the share inside the container.
# GID is the group ID for the owner of the share inside the container.
# S3FS_DEBUG can be set to 1 to get some debugging information from s3fs.
# S3FS_ARGS can contain some additional options to be blindly passed to s3fs. options are supposed to be given comma-separated, e.g. use_path_request_style,allow_other,default_acl=public-read

AWS_S3_BUCKET=orchestrator
AWS_S3_SECRET_ACCESS_KEY=secret
AWS_S3_URL=https://s3.fr-par.scw.cloud
UID=1000
GID=1000
